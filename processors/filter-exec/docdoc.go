// Code generated by "bitfanDoc "; DO NOT EDIT
package exec

import "bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
		Name:       "exec",
		ImportPath: "bitfan/processors/filter-exec",
		Doc:        "Execute a command and use its stdout as event data",
		DocShort:   "drop event when field value is the same in the last event",
		Options: &doc.ProcessorOptions{
			Doc: "",
			Options: []*doc.ProcessorOption{
				&doc.ProcessorOption{
					Name:           "processors.CommonOptions",
					Alias:          ",squash",
					Doc:            "",
					Required:       false,
					Type:           "processors.CommonOptions",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Command",
					Alias:          "command",
					Doc:            "",
					Required:       true,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Args",
					Alias:          "args",
					Doc:            "",
					Required:       false,
					Type:           "array",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Stdin",
					Alias:          "stdin",
					Doc:            "Pass the complete event to stdin as a json string",
					Required:       false,
					Type:           "bool",
					DefaultValue:   "false",
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Target",
					Alias:          "target",
					Doc:            "Where do the output should be stored\nSet \".\" when output is json formated and want to replace current event fields with output\nresponse. (useful)",
					Required:       false,
					Type:           "string",
					DefaultValue:   "\"stdout\"",
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Codec",
					Alias:          "codec",
					Doc:            "The codec used for input data. Input codecs are a convenient method for decoding\nyour data before it enters the input, without needing a separate filter in your bitfan pipeline",
					Required:       false,
					Type:           "codec",
					DefaultValue:   "\"plain\"",
					PossibleValues: []string{},
					ExampleLS:      "",
				},
			},
		},
		Ports: []*doc.ProcessorPort{
			&doc.ProcessorPort{
				Default: true,
				Name:    "PORT_SUCCESS",
				Number:  0,
				Doc:     "",
			},
		},
	}
}
