// Code generated by "bitfanDoc "; DO NOT EDIT
package httpoutput

import "github.com/awillis/bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
		Name:       "httpoutput",
		ImportPath: "github.com/awillis/bitfan/processors/output-http",
		Doc:        "",
		DocShort:   "",
		Options: &doc.ProcessorOptions{
			Doc: "",
			Options: []*doc.ProcessorOption{
				&doc.ProcessorOption{
					Name:         "Codec",
					Alias:        "codec",
					Doc:          "The codec used for input data. Input codecs are a convenient method for decoding\nyour data before it enters the input, without needing a separate filter in your bitfan pipeline",
					Required:     false,
					Type:         "codec",
					DefaultValue: "\"json\"",
					PossibleValues: []string{
						"\"json\"",
						"\"line\"",
						"\"pp\"",
						"\"rubydebug\"",
					},
					ExampleLS: "",
				},
				&doc.ProcessorOption{
					Name:           "AddField",
					Alias:          "add_field",
					Doc:            "Add a field to an event. Default value is {}",
					Required:       false,
					Type:           "hash",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "URL",
					Alias:          "url",
					Doc:            "This output lets you send events to a generic HTTP(S) endpoint\nThis setting can be dynamic using the %{foo} syntax.",
					Required:       true,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Headers",
					Alias:          "headers",
					Doc:            "Custom headers to use format is headers => {\"X-My-Header\", \"%{host}\"}. Default value is {}\nThis setting can be dynamic using the %{foo} syntax.",
					Required:       false,
					Type:           "hash",
					DefaultValue:   "{\"Content-Type\" => \"application/json\"}",
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "HTTPMethod",
					Alias:          "http_method",
					Doc:            "The HTTP Verb. One of \"put\", \"post\", \"patch\", \"delete\", \"get\", \"head\". Default value is \"post\"",
					Required:       false,
					Type:           "string",
					DefaultValue:   "\"post\"",
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "KeepAlive",
					Alias:          "keepalive",
					Doc:            "Turn this on to enable HTTP keepalive support. Default value is true",
					Required:       false,
					Type:           "bool",
					DefaultValue:   "true",
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "PoolMax",
					Alias:          "pool_max",
					Doc:            "Max number of concurrent connections. Default value is 1",
					Required:       false,
					Type:           "int",
					DefaultValue:   "1",
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "ConnectTimeout",
					Alias:          "connect_timeout",
					Doc:            "Timeout (in seconds) to wait for a connection to be established. Default value is 10",
					Required:       false,
					Type:           "uint",
					DefaultValue:   "5",
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "RequestTimeout",
					Alias:          "request_timeout",
					Doc:            "Timeout (in seconds) for the entire request. Default value is 60",
					Required:       false,
					Type:           "uint",
					DefaultValue:   "30",
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "RetryableCodes",
					Alias:          "retryable_codes",
					Doc:            "If encountered as response codes this plugin will retry these requests",
					Required:       false,
					Type:           "array",
					DefaultValue:   "[429, 500, 502, 503, 504]",
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "IgnorableCodes",
					Alias:          "ignorable_codes",
					Doc:            "If you would like to consider some non-2xx codes to be successes\nenumerate them here. Responses returning these codes will be considered successes",
					Required:       false,
					Type:           "array",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "BatchInterval",
					Alias:          "batch_interval",
					Doc:            "",
					Required:       false,
					Type:           "uint",
					DefaultValue:   "5",
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "BatchSize",
					Alias:          "batch_size",
					Doc:            "",
					Required:       false,
					Type:           "uint",
					DefaultValue:   "100",
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "RetryInterval",
					Alias:          "retry_interval",
					Doc:            "",
					Required:       false,
					Type:           "uint",
					DefaultValue:   "10",
					PossibleValues: []string{},
					ExampleLS:      "",
				},
			},
		},
		Ports: []*doc.ProcessorPort{},
	}
}
