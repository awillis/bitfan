// Code generated by "bitfanDoc "; DO NOT EDIT
package rabbitmqinput

import "github.com/awillis/bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
		Name:       "rabbitmqinput",
		ImportPath: "github.com/awillis/bitfan/processors/input-rabbitmq",
		Doc:        "",
		DocShort:   "",
		Options: &doc.ProcessorOptions{
			Doc: "",
			Options: []*doc.ProcessorOption{
				&doc.ProcessorOption{
					Name:           "Ack",
					Alias:          "ack",
					Doc:            "Enable message acknowledgements. Default value is true\n\nWith acknowledgements messages fetched but not yet sent into the pipeline will be requeued by the server if BitFan shuts down.\nAcknowledgements will however hurt the message throughput.\nThis will only send an ack back every prefetch_count messages. Working in batches provides a performance boost.",
					Required:       false,
					Type:           "bool",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "AckBatchSize",
					Alias:          "ack_batch_size",
					Doc:            "Acknowledge messages in batch of value.\nDefault value is 1 (acknowledge each message individually)",
					Required:       false,
					Type:           "uint64",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "AddField",
					Alias:          "add_field",
					Doc:            "Add a field to an event. Default value is {}",
					Required:       false,
					Type:           "hash",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Arguments",
					Alias:          "arguments",
					Doc:            "Extra queue arguments as an array. Default value is {}\n\nE.g. to make a RabbitMQ queue mirrored, use: {\"x-ha-policy\" => \"all\"}",
					Required:       false,
					Type:           "amqp.Table",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "AutoDelete",
					Alias:          "auto_delete",
					Doc:            "Should the queue be deleted on the broker when the last consumer disconnects? Default value is false\n\nSet this option to false if you want the queue to remain on the broker, queueing up messages until a consumer comes along to consume them.",
					Required:       false,
					Type:           "bool",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Codec",
					Alias:          "codec",
					Doc:            "The codec used for input data. Default value is \"json\"\n\nInput codecs are a convenient method for decoding your data before it enters the input, without needing a separate filter in your BitFan pipeline.",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "ConnectRetryInterval",
					Alias:          "connect_retry_interval",
					Doc:            "Time in seconds to wait before retrying a connection. Default value is 1",
					Required:       false,
					Type:           "uint64",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Durable",
					Alias:          "durable",
					Doc:            "Is this queue durable (a.k.a \"Should it survive a broker restart?\"\")?  Default value is false",
					Required:       false,
					Type:           "bool",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Exchange",
					Alias:          "exchange",
					Doc:            "The name of the exchange to bind the queue to. There is no default value for this setting.",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Exclusive",
					Alias:          "exclusive",
					Doc:            "Is the queue exclusive? Default value is false\n\nExclusive queues can only be used by the connection that declared them and will be deleted when it is closed (e.g. due to a BitFan restart).",
					Required:       false,
					Type:           "bool",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Heartbeat",
					Alias:          "heartbeat",
					Doc:            "Heartbeat delay in seconds. If unspecified no heartbeats will be sent",
					Required:       false,
					Type:           "int",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Host",
					Alias:          "host",
					Doc:            "RabbitMQ server address. There is no default value for this setting.",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Key",
					Alias:          "key",
					Doc:            "The routing key to use when binding a queue to the exchange. Default value is \"\"\n\nThis is only relevant for direct or topic exchanges.",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "MetadataEnabled",
					Alias:          "metadata_enabled",
					Doc:            "Not implemented! Enable the storage of message headers and properties in @metadata. Default value is false\n\nThis may impact performance",
					Required:       false,
					Type:           "bool",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Passive",
					Alias:          "passive",
					Doc:            "Use queue passively declared, meaning it must already exist on the server. Default value is false\n\nTo have BitFan create the queue if necessary leave this option as false.\nIf actively declaring a queue that already exists, the queue options for this plugin (durable etc) must match those of the existing queue.",
					Required:       false,
					Type:           "bool",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Password",
					Alias:          "password",
					Doc:            "RabbitMQ password. Default value is \"guest\"",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Port",
					Alias:          "port",
					Doc:            "RabbitMQ port to connect on. Default value is 5672",
					Required:       false,
					Type:           "int",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "PrefetchCount",
					Alias:          "prefetch_count",
					Doc:            "Prefetch count. Default value is 256\n\nIf acknowledgements are enabled with the ack option, specifies the number of outstanding unacknowledged",
					Required:       false,
					Type:           "int",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Queue",
					Alias:          "queue",
					Doc:            "The name of the queue BitFan will consume events from. If left empty, a transient queue with an randomly chosen name will be created.",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "SSL",
					Alias:          "ssl",
					Doc:            "Enable or disable SSL. Default value is false",
					Required:       false,
					Type:           "bool",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Tags",
					Alias:          "tags",
					Doc:            "Add any number of arbitrary tags to your event. There is no default value for this setting.\n\nThis can help with processing later. Tags can be dynamic and include parts of the event using the %{field} syntax.",
					Required:       false,
					Type:           "array",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "User",
					Alias:          "user",
					Doc:            "RabbitMQ username. Default value is \"guest\"",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "VerifySSL",
					Alias:          "verify_ssl",
					Doc:            "Validate SSL certificate. Default value is false",
					Required:       false,
					Type:           "bool",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Vhost",
					Alias:          "vhost",
					Doc:            "The vhost to use. Default value is \"/\"",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
			},
		},
		Ports: []*doc.ProcessorPort{},
	}
}
