// Code generated by "bitfanDoc "; DO NOT EDIT
package sysloginput

import "github.com/awillis/bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
		Name:       "sysloginput",
		ImportPath: "github.com/awillis/bitfan/processors/input-syslog",
		Doc:        "",
		DocShort:   "",
		Options: &doc.ProcessorOptions{
			Doc: "",
			Options: []*doc.ProcessorOption{
				&doc.ProcessorOption{
					Name:           "processors.CommonOptions",
					Alias:          ",squash",
					Doc:            "",
					Required:       false,
					Type:           "processors.CommonOptions",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Format",
					Alias:          "format",
					Doc:            "Which format to use to decode syslog messages. Default value is \"automatic\"\nValue can be \"automatic\",\"rfc3164\", \"rfc5424\" or \"rfc6587\"\n\nNote on \"automatic\" format: if you don't know which format to select,\nor have multiple incoming formats, this is the one to go for.\nThere is a theoretical performance penalty (it has to look at a few bytes\nat the start of the frame), and a risk that you may parse things you don't want to parse\n(rogue syslog clients using other formats), so if you can be absolutely sure of your syslog\nformat, it would be best to select it explicitly.",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Port",
					Alias:          "port",
					Doc:            "Port number to listen on",
					Required:       false,
					Type:           "int",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Protocol",
					Alias:          "protocol",
					Doc:            "Protocol to use to listen to syslog messages\nValue can be either \"tcp\" or \"udp\"",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
			},
		},
		Ports: []*doc.ProcessorPort{},
	}
}
