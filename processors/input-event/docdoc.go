// Code generated by "bitfanDoc "; DO NOT EDIT
package inputeventprocessor

import "bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
  Name:       "inputeventprocessor",
  ImportPath: "bitfan/processors/input-event",
  Doc:        "Generate a blank event on interval",
  DocShort:   "",
  Options:    &doc.ProcessorOptions{
    Doc:     "",
    Options: []*doc.ProcessorOption{
      &doc.ProcessorOption{
        Name:           "processors.CommonOptions",
        Alias:          ",squash",
        Doc:            "",
        Required:       false,
        Type:           "processors.CommonOptions",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Message",
        Alias:          "",
        Doc:            "string value to put in event",
        Required:       false,
        Type:           "string",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Count",
        Alias:          "count",
        Doc:            "How many events to generate",
        Required:       false,
        Type:           "int",
        DefaultValue:   "1",
        PossibleValues: []string{},
        ExampleLS:      "count => 1000000",
      },
      &doc.ProcessorOption{
        Name:           "Interval",
        Alias:          "interval",
        Doc:            "Use CRON or BITFAN notation\nWhen omited, event will be generated on start",
        Required:       false,
        Type:           "string",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "interval => \"@every 10s\"",
      },
    },
  },
  Ports: []*doc.ProcessorPort{},
}
}