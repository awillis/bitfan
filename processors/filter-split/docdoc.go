// Code generated by "bitfanDoc "; DO NOT EDIT
package split

import "bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
		Name:       "split",
		ImportPath: "bitfan/processors/filter-split",
		Doc:        "The split filter clones an event by splitting one of its fields and placing each value resulting from the split into a clone of the original event. The field being split can either be a string or an array.\n\nAn example use case of this filter is for taking output from the exec input plugin which emits one event for the whole output of a command and splitting that output by newline - making each line an event.\n\nThe end result of each split is a complete copy of the event with only the current split section of the given field changed.",
		DocShort:   "Splits multi-line messages into distinct events",
		Options: &doc.ProcessorOptions{
			Doc: "",
			Options: []*doc.ProcessorOption{
				&doc.ProcessorOption{
					Name:           "Field",
					Alias:          "",
					Doc:            "The field which value is split by the terminator",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Target",
					Alias:          "",
					Doc:            "The field within the new event which the value is split into. If not set, target field defaults to split field name",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Terminator",
					Alias:          "",
					Doc:            "The string to split on. This is usually a line terminator, but can be any string\nDefault value is \"\\n\"",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "processors.CommonOptions",
					Alias:          ",squash",
					Doc:            "",
					Required:       false,
					Type:           "processors.CommonOptions",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
			},
		},
		Ports: []*doc.ProcessorPort{
			&doc.ProcessorPort{
				Default: true,
				Name:    "PORT_SUCCESS",
				Number:  0,
				Doc:     "",
			},
			&doc.ProcessorPort{
				Default: false,
				Name:    "PORT_ERROR",
				Number:  1,
				Doc:     "",
			},
		},
	}
}
