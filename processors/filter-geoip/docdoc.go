// Code generated by "bitfanDoc "; DO NOT EDIT
package geoip

import "github.com/awillis/bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
		Name:       "geoip",
		ImportPath: "github.com/awillis/bitfan/processors/filter-geoip",
		Doc:        "The GeoIP filter adds information about the geographical location of IP addresses,\nbased on data from the Maxmind GeoLite2 databases\n\nThis processor use a GeoLite2 City database. From Maxmind’s description\u2009—\u2009\"GeoLite2 databases are free IP geolocation databases comparable to, but less accurate than, MaxMind’s GeoIP2 databases\". Please see GeoIP Lite2 license for more details.\nDatabae is not bundled in the processor,  you can download directly from Maxmind’s website and use the\ndatabase option to specify their location. The GeoLite2 databases can be downloaded from https://dev.maxmind.com/geoip/geoip2/geolite2.",
		DocShort:   "Adds geographical information about an IP address",
		Options: &doc.ProcessorOptions{
			Doc: "",
			Options: []*doc.ProcessorOption{
				&doc.ProcessorOption{
					Name:           "processors.CommonOptions",
					Alias:          ",squash",
					Doc:            "",
					Required:       false,
					Type:           "processors.CommonOptions",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Database",
					Alias:          "database",
					Doc:            "Path or URL to the MaxMind GeoIP2 database.\nDefault value is \"http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz\"\nNote that URL can point to gzipped database (*.mmdb.gz) but local path must point to an unzipped file.",
					Required:       false,
					Type:           "string",
					DefaultValue:   "\"http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz\"",
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "DatabaseType",
					Alias:          "database_type",
					Doc:            "Type of GeoIP database. Default value is \"city\"\nMust be one of \"city\", \"asn\", \"isp\" or \"organization\".",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "RefreshInterval",
					Alias:          "refresh_interval",
					Doc:            "GeoIP database refresh interval, in minutes. Default value is 60\nIf `database` field is a path, file will be reloaded from disk.\nIf it is an URL, database will be fetched (if ETAG differs) and reloaded.",
					Required:       false,
					Type:           "time.Duration",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Fields",
					Alias:          "fields",
					Doc:            "An array of geoip fields to be included in the event.\nPossible fields depend on the database type. By default, all geoip fields are included in the event.",
					Required:       false,
					Type:           "array",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "LruCacheSize",
					Alias:          "lru_cache_size",
					Doc:            "Cache size. Default value is 1000",
					Required:       false,
					Type:           "int64",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Source",
					Alias:          "source",
					Doc:            "The field containing the IP address or hostname to map via geoip.",
					Required:       true,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "TagOnFailure",
					Alias:          "tag_on_failure",
					Doc:            "Append values to the tags field when there has been no successful match\nDefault value is [\"_geoipparsefailure\"]",
					Required:       false,
					Type:           "array",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Target",
					Alias:          "target",
					Doc:            "Define the target field for placing the parsed data. If this setting is omitted,\nthe geoip data will be stored at the root (top level) of the event",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Language",
					Alias:          "language",
					Doc:            "Language to use for city/region/continent names",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
			},
		},
		Ports: []*doc.ProcessorPort{},
	}
}
