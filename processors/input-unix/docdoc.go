// Code generated by "bitfanDoc "; DO NOT EDIT
package unixinput

import "bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
		Name:       "unixinput",
		ImportPath: "bitfan/processors/input-unix",
		Doc:        "",
		DocShort:   "",
		Options: &doc.ProcessorOptions{
			Doc: "",
			Options: []*doc.ProcessorOption{
				&doc.ProcessorOption{
					Name:           "processors.CommonOptions",
					Alias:          ",squash",
					Doc:            "",
					Required:       false,
					Type:           "processors.CommonOptions",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "DataTimeout",
					Alias:          "data_timeout",
					Doc:            "The read timeout in seconds. If a particular connection is idle for more than this timeout period, we will assume it is dead and close it.\nIf you never want to timeout, use 0.\nDefault value is 0",
					Required:       false,
					Type:           "time.Duration",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "ForceUnlink",
					Alias:          "force_unlink",
					Doc:            "Remove socket file in case of EADDRINUSE failure\nDefault value is false",
					Required:       false,
					Type:           "bool",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Mode",
					Alias:          "mode",
					Doc:            "Mode to operate in. server listens for client connections, client connects to a server.\nValue can be any of: \"server\", \"client\"\nDefault value is \"server\"",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Path",
					Alias:          "path",
					Doc:            "When mode is server, the path to listen on. When mode is client, the path to connect to.",
					Required:       true,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Codec",
					Alias:          "codec",
					Doc:            "The codec used for input data. Input codecs are a convenient method for decoding\nyour data before it enters the input, without needing a separate filter in your bitfan pipeline",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
			},
		},
		Ports: []*doc.ProcessorPort{},
	}
}
