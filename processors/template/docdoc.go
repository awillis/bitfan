// Code generated by "bitfanDoc "; DO NOT EDIT
package templateprocessor

import "bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
  Name:       "templateprocessor",
  ImportPath: "bitfan/processors/template",
  Doc:        "",
  DocShort:   "",
  Options:    &doc.ProcessorOptions{
    Doc:     "",
    Options: []*doc.ProcessorOption{
      &doc.ProcessorOption{
        Name:           "processors.CommonOptions",
        Alias:          ",squash",
        Doc:            "",
        Required:       false,
        Type:           "processors.CommonOptions",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Location",
        Alias:          "location",
        Doc:            "Go Template content\n\nset inline content, a path or an url to the template content\n\nGo template : https://golang.org/pkg/html/template/",
        Required:       true,
        Type:           "location",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "location => \"test.tpl\"",
      },
      &doc.ProcessorOption{
        Name:           "Var",
        Alias:          "var",
        Doc:            "You can set variable to be used in template by using ${var}.\neach reference will be replaced by the value of the variable found in Template's content\nThe replacement is case-sensitive.",
        Required:       false,
        Type:           "hash",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "var => {\"hostname\"=>\"myhost\",\"varname\"=>\"varvalue\"}",
      },
      &doc.ProcessorOption{
        Name:           "Target",
        Alias:          "target",
        Doc:            "Define the target field for placing the template execution result. If this setting is omitted,\nthe data will be stored in the \"output\" field",
        Required:       false,
        Type:           "string",
        DefaultValue:   "\"output\"",
        PossibleValues: []string{},
        ExampleLS:      "target => \"mydata\"",
      },
    },
  },
  Ports: []*doc.ProcessorPort{},
}
}