// Code generated by "bitfanDoc "; DO NOT EDIT
package kafkainput

import "bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
		Behavior:   "",
		Name:       "kafkainput",
		ImportPath: "bitfan/processors/input-kafka",
		Doc:        "",
		DocShort:   "",
		Options: &doc.ProcessorOptions{
			Doc: "",
			Options: []*doc.ProcessorOption{
				{
					Name:           "processors.CommonOptions",
					Alias:          ",squash",
					Doc:            "",
					Required:       false,
					Type:           "processors.CommonOptions",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				{
					Name:           "BootstrapServer",
					Alias:          "bootstrap_server",
					Doc:            "Bootstrap Server ( \"host:port\" )",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				{
					Name:           "Brokers",
					Alias:          "brokers",
					Doc:            "Broker list",
					Required:       false,
					Type:           "array",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				{
					Name:           "TopicID",
					Alias:          "topic_id",
					Doc:            "Kafka topic",
					Required:       true,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				{
					Name:           "GroupID",
					Alias:          "group_id",
					Doc:            "Kafka group id",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				{
					Name:           "ClientID",
					Alias:          "client_id",
					Doc:            "Kafka client id",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				{
					Name:           "Balancer",
					Alias:          "balancer",
					Doc:            "Balancer ( roundrobin, hash or leastbytes )",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				{
					Name:           "Compression",
					Alias:          "compression",
					Doc:            "Compression algorithm ( 'gzip', 'snappy', or 'lz4' )",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				{
					Name:           "MaxAttempts",
					Alias:          "max_attempts",
					Doc:            "Max Attempts",
					Required:       false,
					Type:           "int",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				{
					Name:           "QueueSize",
					Alias:          "queue_size",
					Doc:            "Queue Size",
					Required:       false,
					Type:           "int",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				{
					Name:           "RequestBytesMin",
					Alias:          "request_bytes_min",
					Doc:            "Minimum amount of bytes to fetch per request",
					Required:       false,
					Type:           "int",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				{
					Name:           "RequestBytesMax",
					Alias:          "request_bytes_max",
					Doc:            "Maximum amount of bytes to fetch per request",
					Required:       false,
					Type:           "int",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				{
					Name:           "KeepAlive",
					Alias:          "keepalive",
					Doc:            "Keep Alive ( in seconds )",
					Required:       false,
					Type:           "int",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				{
					Name:           "MaxWait",
					Alias:          "max_wait",
					Doc:            "Max time to wait for new data when fetching batches ( in seconds )",
					Required:       false,
					Type:           "int",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				{
					Name:           "ReadLagInterval",
					Alias:          "read_lag_interval",
					Doc:            "Frequency at which the reader lag is updated. Negative value disables lag reporting.",
					Required:       false,
					Type:           "int",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
			},
		},
		Ports: []*doc.ProcessorPort{},
	}
}
