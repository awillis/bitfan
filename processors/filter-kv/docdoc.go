// Code generated by "bitfanDoc "; DO NOT EDIT
package kv

import "bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
		Name:       "kv",
		ImportPath: "bitfan/processors/filter-kv",
		Doc:        "This filter helps automatically parse messages (or specific event fields)\nwhich are of the foo=bar variety.",
		DocShort:   "Parses key-value pairs",
		Options: &doc.ProcessorOptions{
			Doc: "",
			Options: []*doc.ProcessorOption{
				&doc.ProcessorOption{
					Name:           "processors.CommonOptions",
					Alias:          ",squash",
					Doc:            "",
					Required:       false,
					Type:           "processors.CommonOptions",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "AllowDuplicateValues",
					Alias:          "allow_duplicate_values",
					Doc:            "A bool option for removing duplicate key/value pairs.\nWhen set to false, only one unique key/value pair will be preserved.\nFor example, consider a source like from=me from=me.\n[from] will map to an Array with two elements: [\"me\", \"me\"].\nto only keep unique key/value pairs, you could use this configuration\n```\nkv {\n  allow_duplicate_values => false\n}\n```",
					Required:       false,
					Type:           "bool",
					DefaultValue:   "true",
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "DefaultKeys",
					Alias:          "default_keys",
					Doc:            "A hash specifying the default keys and their values which should be added\nto the event in case these keys do not exist in the source field being parsed.\n\nExample\n```\nkv {\n  default_keys => { \"from\"=> \"logstash@example.com\",\n                   \"to\"=> \"default@dev.null\" }\n}\n```",
					Required:       false,
					Type:           "hash",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "ExcludeKeys",
					Alias:          "exclude_keys",
					Doc:            "An array specifying the parsed keys which should not be added to the event.\n\nBy default no keys will be excluded.\n\nFor example, consider a source like Hey, from=<abc>, to=def foo=bar.\n\nTo exclude from and to, but retain the foo key, you could use this configuration:\n```\nkv {\n  exclude_keys => [ \"from\", \"to\" ]\n}\n```",
					Required:       false,
					Type:           "array",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "FieldSplit",
					Alias:          "field_split",
					Doc:            "A string of characters to use as delimiters for parsing out key-value pairs.\n\nThese characters form a regex character class and thus you must escape special regex characters like [ or ] using \\.\n#### Example with URL Query Strings\nFor example, to split out the args from a url query string such as ?pin=12345~0&d=123&e=foo@bar.com&oq=bobo&ss=12345:\n```\n kv {\n   field_split => \"&?\"\n }\n```\nThe above splits on both & and ? characters, giving you the following fields:\n\n* pin: 12345~0\n* d: 123\n* e: foo@bar.com\n* oq: bobo\n* ss: 12345",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "IncludeBrackets",
					Alias:          "include_brackets",
					Doc:            "A boolean specifying whether to include brackets as value wrappers (the default is true)\n```\nkv {\n  include_brackets => true\n}\n```\nFor example, the result of this line: bracketsone=(hello world) bracketstwo=[hello world]\nwill be:\n\n* bracketsone: hello world\n* bracketstwo: hello world\n\ninstead of:\n\n* bracketsone: (hello\n* bracketstwo: [hello",
					Required:       false,
					Type:           "bool",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "IncludeKeys",
					Alias:          "include_keys",
					Doc:            "An array specifying the parsed keys which should be added to the event. By default all keys will be added.\n\nFor example, consider a source like Hey, from=<abc>, to=def foo=bar. To include from and to, but exclude the foo key, you could use this configuration:\n```\nkv {\n  include_keys => [ \"from\", \"to\" ]\n}\n```",
					Required:       false,
					Type:           "array",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Prefix",
					Alias:          "",
					Doc:            "A string to prepend to all of the extracted keys.\n\nFor example, to prepend arg_ to all keys:\n```\nkv {\n  prefix => \"arg_\" }\n}\n```",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Recursive",
					Alias:          "",
					Doc:            "A boolean specifying whether to drill down into values and recursively get more key-value pairs from it. The extra key-value pairs will be stored as subkeys of the root key.\n\nDefault is not to recursive values.\n```\nkv {\n recursive => \"true\"\n}\n```",
					Required:       false,
					Type:           "bool",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Source",
					Alias:          "",
					Doc:            "The field to perform key=value searching on\n\nFor example, to process the not_the_message field:\n```\nkv { source => \"not_the_message\" }\n```",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Target",
					Alias:          "",
					Doc:            "The name of the container to put all of the key-value pairs into.\n\nIf this setting is omitted, fields will be written to the root of the event, as individual fields.\n\nFor example, to place all keys into the event field kv:\n```\nkv { target => \"kv\" }\n```",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Trimkey",
					Alias:          "trim_key",
					Doc:            "A string of characters to trim from the key. This is useful if your keys are wrapped in brackets or start with space.\n\nFor example, to strip < > [ ] and , characters from keys:\n```\nkv {\n  trimkey => \"<>[],\"\n}\n```",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "TrimValue",
					Alias:          "trim_value",
					Doc:            "Constants used for transform check A string of characters to trim from the value. This is useful if your values are wrapped in brackets or are terminated with commas (like postfix logs).\n\nThese characters form a regex character class and thus you must escape special regex characters like [ or ] using \\.\n\nOnly leading and trailing characters are trimed from the value.\n\nFor example, to trim <, >, [, ] and , characters from values:\n\n```\nfilter {\n  kv {\n    trim_value => \"<>\\[\\],\"\n  }\n}\n```",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "ValueSplit",
					Alias:          "value_split",
					Doc:            "A string of characters to use as delimiters for identifying key-value relations.\n\nThese characters form a regex character class and thus you must escape special regex characters like [ or ] using \\.\n\nFor example, to identify key-values such as key1:value1 key2:value2:\n```\n{ kv { value_split => \":\" }\n```",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
			},
		},
		Ports: []*doc.ProcessorPort{
			&doc.ProcessorPort{
				Default: true,
				Name:    "PORT_SUCCESS",
				Number:  0,
				Doc:     "",
			},
		},
	}
}
