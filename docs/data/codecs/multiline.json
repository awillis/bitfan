{
  "Decoder": {
    "Doc": "Merges multiline messages into a single event",
    "Options": {
      "Doc": "",
      "Options": [
        {
          "Alias": "delimiter",
          "DefaultValue": "\"\\n\"",
          "Doc": "Change the delimiter that separates lines",
          "ExampleLS": "",
          "Name": "Delimiter",
          "PossibleValues": null,
          "Required": false,
          "Type": "string"
        },
        {
          "Alias": "negate",
          "DefaultValue": "false",
          "Doc": "Negate the regexp pattern (if not matched).",
          "ExampleLS": "",
          "Name": "Negate",
          "PossibleValues": null,
          "Required": false,
          "Type": "bool"
        },
        {
          "Alias": "pattern",
          "DefaultValue": null,
          "Doc": "The regular expression to match with the line",
          "ExampleLS": "pattern =\u003e \"^\\\\s\"",
          "Name": "Pattern",
          "PossibleValues": null,
          "Required": true,
          "Type": "string"
        },
        {
          "Alias": "what",
          "DefaultValue": "\"previous\"",
          "Doc": "If the pattern matched, does event belong to the next or previous event?",
          "ExampleLS": "",
          "Name": "What",
          "PossibleValues": [
            "previous",
            "next"
          ],
          "Required": false,
          "Type": "string"
        }
      ]
    }
  },
  "Doc": "The multiline codec will collapse multiline messages and merge them into a single event.\n\nThe original goal of this codec was to allow joining of multiline messages from files into a single event. For example, joining Java exception and stacktrace messages into a single event.\n\nThe config looks like this:\n```\ninput {\n  stdin {\n    codec =\u003e multiline {\n      pattern =\u003e \"pattern, a regexp\"\n      negate =\u003e true or false\n      what =\u003e \"previous\" or \"next\"\n    }\n  }\n}\n```\nThe pattern should match what you believe to be an indicator that the field is part of a multi-line event.\n\nThe what must be previous or next and indicates the relation to the multi-line event.\n\nThe negate can be true or false (defaults to false). If true, a message not matching the pattern will constitute a match of the multiline filter and the what will be applied. (vice-versa is also true)\n\nFor example, Java stack traces are multiline and usually have the message starting at the far-left, with each subsequent line indented. Do this:\n\n```\ninput {\n  stdin {\n    codec =\u003e multiline {\n      pattern =\u003e \"^\\\\s\"\n      what =\u003e \"previous\"\n    }\n  }\n}\n```\nThis says that any line starting with whitespace belongs to the previous line.\n\nAnother example is to merge lines not starting with a date up to the previous line..\n\n```\ninput {\n  file {\n    path =\u003e \"/var/log/someapp.log\"\n    codec =\u003e multiline {\n      # Grok pattern names are valid! :)\n      pattern =\u003e \"^%{TIMESTAMP_ISO8601} \"\n      negate =\u003e true\n      what =\u003e \"previous\"\n    }\n  }\n}\n```\nThis says that any line not starting with a timestamp should be merged with the previous line.\n\nOne more common example is C line continuations (backslash). Hereâ€™s how to do that:\n\n```\nfilter {\n  multiline {\n    pattern =\u003e \"\\\\$\"\n    what =\u003e \"next\"\n  }\n}\n```\nThis says that any line ending with a backslash should be combined with the following line.",
  "DocShort": "",
  "Encoder": null,
  "ImportPath": "github.com/awillis/bitfan/codecs/multiline",
  "Name": "multiline",
  "PkgName": "multilinecodec"
}