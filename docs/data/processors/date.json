{
  "Doc": "The date filter is used for parsing dates from fields, and then using that date or timestamp as the logstash timestamp for the event.\n\nFor example, syslog events usually have timestamps like this:\n`\"Apr 17 09:32:01\"`\n\nYou would use the date format MMM dd HH:mm:ss to parse this.\n\nThe date filter is especially important for sorting events and for backfilling old data. If you donâ€™t get the date correct in your event, then searching for them later will likely sort out of order.\n\nIn the absence of this filter, logstash will choose a timestamp based on the first time it sees the event (at input time), if the timestamp is not already set in the event. For example, with file input, the timestamp is set to the time of each read.",
  "DocShort": "Parses dates from fields to use as the BitFan timestamp for an event",
  "ImportPath": "bitfan/processors/filter-date",
  "Name": "date",
  "Options": {
    "Doc": "",
    "Options": [
      {
        "Alias": ",squash",
        "DefaultValue": null,
        "Doc": "",
        "ExampleLS": "",
        "Name": "processors.CommonOptions",
        "PossibleValues": null,
        "Required": false,
        "Type": "processors.CommonOptions"
      },
      {
        "Alias": "match",
        "DefaultValue": null,
        "Doc": "The date formats allowed are anything allowed by Joda time format.\nYou can see the docs for this format http://www.joda.org/joda-time/key_format.html\nAn array with field name first, and format patterns following, [ field, formats... ]",
        "ExampleLS": "",
        "Name": "Match",
        "PossibleValues": null,
        "Required": true,
        "Type": "array"
      },
      {
        "Alias": "tag_on_failure",
        "DefaultValue": null,
        "Doc": "Append values to the tags field when there has been no successful match\nDefault value is [\"_dateparsefailure\"]",
        "ExampleLS": "",
        "Name": "TagOnFailure",
        "PossibleValues": null,
        "Required": false,
        "Type": "array"
      },
      {
        "Alias": "target",
        "DefaultValue": null,
        "Doc": "Store the matching timestamp into the given target field. If not provided,\ndefault to updating the @timestamp field of the event",
        "ExampleLS": "",
        "Name": "Target",
        "PossibleValues": null,
        "Required": false,
        "Type": "string"
      },
      {
        "Alias": "timezone",
        "DefaultValue": null,
        "Doc": "Specify a time zone canonical ID to be used for date parsing.\n\nThe valid IDs are listed on IANA Time Zone database, such as \"America/New_York\".\n\nThis is useful in case the time zone cannot be extracted from the value,\nand is not the platform default. If this is not specified the platform default\n will be used. Canonical ID is good as it takes care of daylight saving time\nfor you For example, America/Los_Angeles or Europe/Paris are valid IDs.\n\nThis field can be dynamic and include parts of the event using the %{field} syntax",
        "ExampleLS": "",
        "Name": "Timezone",
        "PossibleValues": null,
        "Required": false,
        "Type": "string"
      }
    ]
  },
  "Ports": []
}