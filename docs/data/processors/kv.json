{
  "Doc": "This filter helps automatically parse messages (or specific event fields)\nwhich are of the foo=bar variety.",
  "DocShort": "Parses key-value pairs",
  "ImportPath": "bitfan/processors/filter-kv",
  "Name": "kv",
  "Options": {
    "Doc": "",
    "Options": [
      {
        "Alias": ",squash",
        "DefaultValue": null,
        "Doc": "",
        "ExampleLS": "",
        "Name": "processors.CommonOptions",
        "PossibleValues": null,
        "Required": false,
        "Type": "processors.CommonOptions"
      },
      {
        "Alias": "allow_duplicate_values",
        "DefaultValue": "true",
        "Doc": "A bool option for removing duplicate key/value pairs.\nWhen set to false, only one unique key/value pair will be preserved.\nFor example, consider a source like from=me from=me.\n[from] will map to an Array with two elements: [\"me\", \"me\"].\nto only keep unique key/value pairs, you could use this configuration\n```\nkv {\n  allow_duplicate_values =\u003e false\n}\n```",
        "ExampleLS": "",
        "Name": "AllowDuplicateValues",
        "PossibleValues": null,
        "Required": false,
        "Type": "bool"
      },
      {
        "Alias": "default_keys",
        "DefaultValue": null,
        "Doc": "A hash specifying the default keys and their values which should be added\nto the event in case these keys do not exist in the source field being parsed.\n\nExample\n```\nkv {\n  default_keys =\u003e { \"from\"=\u003e \"logstash@example.com\",\n                   \"to\"=\u003e \"default@dev.null\" }\n}\n```",
        "ExampleLS": "",
        "Name": "DefaultKeys",
        "PossibleValues": null,
        "Required": false,
        "Type": "hash"
      },
      {
        "Alias": "exclude_keys",
        "DefaultValue": null,
        "Doc": "An array specifying the parsed keys which should not be added to the event.\n\nBy default no keys will be excluded.\n\nFor example, consider a source like Hey, from=\u003cabc\u003e, to=def foo=bar.\n\nTo exclude from and to, but retain the foo key, you could use this configuration:\n```\nkv {\n  exclude_keys =\u003e [ \"from\", \"to\" ]\n}\n```",
        "ExampleLS": "",
        "Name": "ExcludeKeys",
        "PossibleValues": null,
        "Required": false,
        "Type": "array"
      },
      {
        "Alias": "field_split",
        "DefaultValue": null,
        "Doc": "A string of characters to use as delimiters for parsing out key-value pairs.\n\nThese characters form a regex character class and thus you must escape special regex characters like [ or ] using \\.\n#### Example with URL Query Strings\nFor example, to split out the args from a url query string such as ?pin=12345~0\u0026d=123\u0026e=foo@bar.com\u0026oq=bobo\u0026ss=12345:\n```\n kv {\n   field_split =\u003e \"\u0026?\"\n }\n```\nThe above splits on both \u0026 and ? characters, giving you the following fields:\n\n* pin: 12345~0\n* d: 123\n* e: foo@bar.com\n* oq: bobo\n* ss: 12345",
        "ExampleLS": "",
        "Name": "FieldSplit",
        "PossibleValues": null,
        "Required": false,
        "Type": "string"
      },
      {
        "Alias": "include_brackets",
        "DefaultValue": null,
        "Doc": "A boolean specifying whether to include brackets as value wrappers (the default is true)\n```\nkv {\n  include_brackets =\u003e true\n}\n```\nFor example, the result of this line: bracketsone=(hello world) bracketstwo=[hello world]\nwill be:\n\n* bracketsone: hello world\n* bracketstwo: hello world\n\ninstead of:\n\n* bracketsone: (hello\n* bracketstwo: [hello",
        "ExampleLS": "",
        "Name": "IncludeBrackets",
        "PossibleValues": null,
        "Required": false,
        "Type": "bool"
      },
      {
        "Alias": "include_keys",
        "DefaultValue": null,
        "Doc": "An array specifying the parsed keys which should be added to the event. By default all keys will be added.\n\nFor example, consider a source like Hey, from=\u003cabc\u003e, to=def foo=bar. To include from and to, but exclude the foo key, you could use this configuration:\n```\nkv {\n  include_keys =\u003e [ \"from\", \"to\" ]\n}\n```",
        "ExampleLS": "",
        "Name": "IncludeKeys",
        "PossibleValues": null,
        "Required": false,
        "Type": "array"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "A string to prepend to all of the extracted keys.\n\nFor example, to prepend arg_ to all keys:\n```\nkv {\n  prefix =\u003e \"arg_\" }\n}\n```",
        "ExampleLS": "",
        "Name": "Prefix",
        "PossibleValues": null,
        "Required": false,
        "Type": "string"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "A boolean specifying whether to drill down into values and recursively get more key-value pairs from it. The extra key-value pairs will be stored as subkeys of the root key.\n\nDefault is not to recursive values.\n```\nkv {\n recursive =\u003e \"true\"\n}\n```",
        "ExampleLS": "",
        "Name": "Recursive",
        "PossibleValues": null,
        "Required": false,
        "Type": "bool"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "The field to perform key=value searching on\n\nFor example, to process the not_the_message field:\n```\nkv { source =\u003e \"not_the_message\" }\n```",
        "ExampleLS": "",
        "Name": "Source",
        "PossibleValues": null,
        "Required": false,
        "Type": "string"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "The name of the container to put all of the key-value pairs into.\n\nIf this setting is omitted, fields will be written to the root of the event, as individual fields.\n\nFor example, to place all keys into the event field kv:\n```\nkv { target =\u003e \"kv\" }\n```",
        "ExampleLS": "",
        "Name": "Target",
        "PossibleValues": null,
        "Required": false,
        "Type": "string"
      },
      {
        "Alias": "trim_key",
        "DefaultValue": null,
        "Doc": "A string of characters to trim from the key. This is useful if your keys are wrapped in brackets or start with space.\n\nFor example, to strip \u003c \u003e [ ] and , characters from keys:\n```\nkv {\n  trimkey =\u003e \"\u003c\u003e[],\"\n}\n```",
        "ExampleLS": "",
        "Name": "Trimkey",
        "PossibleValues": null,
        "Required": false,
        "Type": "string"
      },
      {
        "Alias": "trim_value",
        "DefaultValue": null,
        "Doc": "Constants used for transform check A string of characters to trim from the value. This is useful if your values are wrapped in brackets or are terminated with commas (like postfix logs).\n\nThese characters form a regex character class and thus you must escape special regex characters like [ or ] using \\.\n\nOnly leading and trailing characters are trimed from the value.\n\nFor example, to trim \u003c, \u003e, [, ] and , characters from values:\n\n```\nfilter {\n  kv {\n    trim_value =\u003e \"\u003c\u003e\\[\\],\"\n  }\n}\n```",
        "ExampleLS": "",
        "Name": "TrimValue",
        "PossibleValues": null,
        "Required": false,
        "Type": "string"
      },
      {
        "Alias": "value_split",
        "DefaultValue": null,
        "Doc": "A string of characters to use as delimiters for identifying key-value relations.\n\nThese characters form a regex character class and thus you must escape special regex characters like [ or ] using \\.\n\nFor example, to identify key-values such as key1:value1 key2:value2:\n```\n{ kv { value_split =\u003e \":\" }\n```",
        "ExampleLS": "",
        "Name": "ValueSplit",
        "PossibleValues": null,
        "Required": false,
        "Type": "string"
      }
    ]
  },
  "Ports": [
    {
      "Default": true,
      "Doc": "",
      "Name": "PORT_SUCCESS",
      "Number": 0
    }
  ]
}