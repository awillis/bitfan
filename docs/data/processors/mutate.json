{
  "Doc": "mutate filter allows to perform general mutations on fields. You can rename, remove, replace, and modify fields in your event.",
  "DocShort": "",
  "ImportPath": "bitfan/processors/filter-mutate",
  "Name": "mutate",
  "Options": {
    "Doc": "",
    "Options": [
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "If this filter is successful, add any arbitrary fields to this event.",
        "ExampleLS": "",
        "Name": "Add_field",
        "PossibleValues": null,
        "Required": false,
        "Type": "hash"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "If this filter is successful, add arbitrary tags to the event.\nTags can be dynamic and include parts of the event using the %{field} syntax.",
        "ExampleLS": "",
        "Name": "Add_tag",
        "PossibleValues": null,
        "Required": false,
        "Type": "array"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "Convert a fieldâ€™s value to a different type, like turning a string to an integer.\nIf the field value is an array, all members will be converted. If the field is a hash,\nno action will be taken.\nIf the conversion type is boolean, the acceptable values are:\nTrue: true, t, yes, y, and 1\nFalse: false, f, no, n, and 0\nIf a value other than these is provided, it will pass straight through and log a warning message.\nValid conversion targets are: integer, float, string, and boolean.",
        "ExampleLS": "",
        "Name": "Convert",
        "PossibleValues": null,
        "Required": false,
        "Type": "hash"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "Convert a string field by applying a regular expression and a replacement. If the field is not a string, no action will be taken.\nThis configuration takes an array consisting of 3 elements per field/substitution.\nBe aware of escaping any backslash in the config file.",
        "ExampleLS": "",
        "Name": "Gsub",
        "PossibleValues": null,
        "Required": false,
        "Type": "array"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "Join an array with a separator character. Does nothing on non-array fields",
        "ExampleLS": "",
        "Name": "Join",
        "PossibleValues": null,
        "Required": false,
        "Type": "hash"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "Convert a value to its lowercase equivalent",
        "ExampleLS": "",
        "Name": "Lowercase",
        "PossibleValues": null,
        "Required": false,
        "Type": "array"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "Merge two fields of arrays or hashes. String fields will be automatically be converted into an array",
        "ExampleLS": "",
        "Name": "Merge",
        "PossibleValues": null,
        "Required": false,
        "Type": "hash"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "If this filter is successful, remove arbitrary fields from this event.",
        "ExampleLS": "",
        "Name": "Remove_field",
        "PossibleValues": null,
        "Required": false,
        "Type": "array"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "If this filter is successful, remove arbitrary tags from the event.\nTags can be dynamic and include parts of the event using the %{field} syntax",
        "ExampleLS": "",
        "Name": "Remove_tag",
        "PossibleValues": null,
        "Required": false,
        "Type": "array"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "Rename key on one or more fields",
        "ExampleLS": "",
        "Name": "Rename",
        "PossibleValues": null,
        "Required": false,
        "Type": "hash"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "Replace a field with a new value. The new value can include %{foo} strings to\nhelp you build a new value from other parts of the event",
        "ExampleLS": "",
        "Name": "Replace",
        "PossibleValues": null,
        "Required": false,
        "Type": "hash"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "Split a field to an array using a separator character. Only works on string fields",
        "ExampleLS": "",
        "Name": "Split",
        "PossibleValues": null,
        "Required": false,
        "Type": "hash"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "Strip whitespace from processors. NOTE: this only works on leading and trailing whitespace",
        "ExampleLS": "",
        "Name": "Strip",
        "PossibleValues": null,
        "Required": false,
        "Type": "array"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "Update an existing field with a new value. If the field does not exist, then no action will be taken",
        "ExampleLS": "",
        "Name": "Update",
        "PossibleValues": null,
        "Required": false,
        "Type": "hash"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "Convert a value to its uppercase equivalent",
        "ExampleLS": "",
        "Name": "Uppercase",
        "PossibleValues": null,
        "Required": false,
        "Type": "array"
      },
      {
        "Alias": "",
        "DefaultValue": null,
        "Doc": "remove all fields, except theses fields (work only with first level fields)",
        "ExampleLS": "",
        "Name": "Remove_all_but",
        "PossibleValues": null,
        "Required": false,
        "Type": "array"
      }
    ]
  },
  "Ports": [
    {
      "Default": true,
      "Doc": "",
      "Name": "PORT_SUCCESS",
      "Number": 0
    }
  ]
}